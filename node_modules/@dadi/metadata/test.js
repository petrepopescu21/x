var should = require('should')

var metadata = require('./index.js')

describe('Metadata', function () {
  it('should return page 1 if page not specified', function () {
    var options = {  }
    var meta = metadata(options)
    meta.page.should.eql(1)
  })

  it('should return offset if skip is specified', function () {
    var options = { skip: 20 }
    var meta = metadata(options)
    meta.offset.should.eql(20)
  })

  it('should return totalCount if count is specified', function () {
    var options = {  }
    var meta = metadata(options, 200)
    meta.totalCount.should.eql(200)
  })

  it('should use limit = 1 if limit not specified', function () {
    var options = {  }
    var meta = metadata(options, 200)
    meta.totalPages.should.eql(200)
  })

  it('should not return nextPage if current page is equal to totalPages', function () {
    var options = { page: 10, limit: 20 }
    var meta = metadata(options, 200)
    should.not.exist(meta.nextPage)
  })

  it('should return nextPage if current page is less than totalPages', function () {
    var options = { page: 2, limit: 20 }
    var meta = metadata(options, 200)
    should.exist(meta.nextPage)
    meta.nextPage.should.eql(3)
  })

  it('should not return prevPage if current page is 1', function () {
    var options = { page: 1, limit: 20 }
    var meta = metadata(options, 200)
    should.not.exist(meta.prevPage)
  })

  it('should return prevPage if current page is greater than 1 and less than totalPages', function () {
    var options = { page: 2, limit: 20 }
    var meta = metadata(options, 200)
    should.exist(meta.prevPage)
    meta.prevPage.should.eql(1)
  })

  describe('custom properties', () => {
    it('should be added if their value is defined', function () {
      var options = { fooBar: 123 }
      var meta = metadata(options, 200)
      meta.fooBar.should.eql(123)
    })

    it('should be ignored if their value is undefined', function () {
      var options = { fooBar: undefined }
      var meta = metadata(options, 200)

      Object.keys(meta).length.should.eql(5)
    })
  })
})